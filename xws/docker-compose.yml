version: '3'

services: 

#    angular:
#       container_name: angular
#       build:
#           context: ./angular-frontend
#           dockerfile: Dockerfile
#       ports: 
#          - 4200:4200
#       networks:
#             - backend

    user-service: 
        image: user-service
        container_name: user-service
        build:
            context: ./user-service
            dockerfile: Dockerfile
        ports:
            - 8081:8081
        restart: on-failure
        networks:
            - backend
        environment: 
            DATABASE_DOMAIN : ${DATABASE_DOMAIN}
            DATABASE_PORT : ${DATABASE_PORT}
            CONTENT_SERVICE_DOMAIN: ${CONTENT_SERVICE_DOMAIN}
            CONTENT_SERVICE_PORT : ${CONTENT_SERVICE_PORT}
            NOTIFICATION_SERVICE_DOMAIN: ${NOTIFICATION_SERVICE_DOMAIN}
            NOTIFICATION_SERVICE_PORT : ${NOTIFICATION_SERVICE_PORT}
        depends_on: 
            - postgres

    content-service: 
        image: content-service
        container_name: content-service
        build:
            context: ./content-service
            dockerfile: Dockerfile
        ports:
            - 8082:8082
        restart: on-failure
        networks:
            - backend
        volumes:
            - media-data:/app/storage/media-content
        environment: 
            DATABASE_DOMAIN : ${DATABASE_DOMAIN}
            DATABASE_PORT : ${DATABASE_PORT}
            USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN}
            USER_SERVICE_PORT : ${USER_SERVICE_PORT}
            NOTIFICATION_SERVICE_DOMAIN: ${NOTIFICATION_SERVICE_DOMAIN}
            NOTIFICATION_SERVICE_PORT : ${NOTIFICATION_SERVICE_PORT}
            MEDIA_STORAGE_PATH : ${MEDIA_STORAGE_PATH}
        depends_on: 
            - postgres

    notification-service: 
        image: notification-service
        container_name: notification-service
        build:
            context: ./notification-service
            dockerfile: Dockerfile
        ports:
            - 8083:8083
        restart: on-failure
        networks:
            - backend
        environment: 
            DATABASE_DOMAIN : ${DATABASE_DOMAIN}
            DATABASE_PORT : ${DATABASE_PORT}
            USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN}
            USER_SERVICE_PORT : ${USER_SERVICE_PORT}
            CONTENT_SERVICE_DOMAIN: ${CONTENT_SERVICE_DOMAIN}
            CONTENT_SERVICE_PORT : ${CONTENT_SERVICE_PORT}
        depends_on: 
            - postgres
    
    postgres:
        image: postgres
        container_name: postgres
        restart: on-failure
        build: 
            context: ./postgres
            dockerfile: Dockerfile
        ports:
            - 5432:5432
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: admin
        networks:
            - backend

    gateway:
        image: nginx:1.19.8-alpine
        ports:
            - 8080:8080
        networks:
            - backend
        volumes:
            - ./gateway/nginx.conf:/etc/nginx/nginx.conf
            - ./gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
        depends_on: 
            - user-service
            - content-service
            - notification-service


networks:
  backend:
    name: nistagram
    driver: bridge

volumes:
    media-data: 
    